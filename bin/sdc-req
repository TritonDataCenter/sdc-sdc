#!/usr/bin/bash
#
# Copyright (c) 2013 Joyent Inc., All rights reserved.
#
# grep a request UUID on all the SDC application logs
#

if [ "$TRACE" != "" ]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail


TOP=$(cd $(dirname $0)/../ 2>/dev/null; pwd)
LIBDC=$TOP/lib/libdc.sh
if [[ ! -f $LIBDC ]]; then
    echo "$(basename $0): fatal: unable to find $LIBDC"
    exit 1
fi
source $LIBDC

req_id=$1
if [[ -z ${req_id} ]]; then
    cat <<EOF
error: no REQUEST-ID argument given

Usage:
        $0 REQUEST-ID [EXTRA-BUNYAN-ARGS]

EOF
    exit 1
fi

CMD_FMT="sdc-oneachnode -n %s -j \"%s %s\""
GREP_CMD=$(printf "/usr/bin/grep -h %s" $req_id)

vmapi "/vms?state=running&tags.smartdc_type=core" >/tmp/vms.$$ 2>&1
return_code=$?
if [[ ${return_code} != 0 ]]; then
    echo "VMAPI FAILED with:" >&2
    cat /tmp/vms.$$ >&2
    return ${return_code}
fi

server_vms=$(json -HA -e "this[0].vms = {}; for (var i = 0; i < this.length; i++) {
    if (this[0].vms[this[i].server_uuid] === undefined) this[0].vms[this[i].server_uuid] = [];
    this[0].vms[this[i].server_uuid].push({role: this[i].tags.smartdc_role, uuid: this[i].uuid});
}" 0.vms < /tmp/vms.$$)

for server_uuid in $(echo "${server_vms}" | json -ka); do
    logs=$(echo "${server_vms}" | json -e "this.string = this['$server_uuid'].map(function(info) {
        var zoneLogs = [];
        if (info.role === 'moray') {
            zoneLogs.push('/zones/' + info.uuid + '/root/var/log/moray.log');
        } else if (info.role === 'cloudapi') {
            zoneLogs.push('/zones/' + info.uuid + '/root/var/log/cloudapi.log');
        } else {
            zoneLogs.push('/zones/' + info.uuid + '/root/var/svc/log/*smartdc*.log');
        }
        if (['manatee', 'assets'].indexOf(info.role) === -1) {
            // Currently no stock SDC log rotations in assets and manatee.
            zoneLogs.push('/zones/' + info.uuid + '/root/var/log/sdc/upload/*.log');
        }
        return zoneLogs.join(' ');
    }).join(' ');" string)

    set +o errexit
    cmd=$(printf "${CMD_FMT}" "${server_uuid}" "${GREP_CMD}" "${logs}")
    output=$(eval $cmd)
    exit_status=$?
    set -o errexit

    if [[ ${exit_status} != 0 ]]; then
        echo "sdc-oneachnode failed with:" >&2
        echo "${output}" | json [0].result.stderr >&2
        exit ${exit_status}
    else
        echo "${output}" | json [0].result.stdout
    fi
done

exit $?
