#!/opt/smartdc/sdc/build/node/bin/node --abort-on-uncaught-exception
/*
 * Copyright (c) 2013 Joyent Inc. All rights reserved.
 * Copyright 2024 Spearhead Systems SRL.
 *
 * Checks if Rabbitmq is online and properly sending messages through
 */

var assert = require('assert');
var amqp = require('amqp');


function amqpCreds() {
    var config = require('../etc/config.json');
    // guest:guest:10.99.99.20:5672
    var values = config.rabbitmq.split(':');

    var rabbit = {
        login: values[0],
        password: values[1],
        host: values[2],
        port: values[3]
    };
    return rabbit;
}

var timeout = setTimeout(function () {
    console.error('sdc-check-amqp error: timed out');
    process.exit(1);
}, 5000);

var conn = amqp.createConnection(amqpCreds(), {
    defaultExchangeName: 'amq.topic'
});

conn.on('close', function () {
    console.error(
        'sdc-check-amqp error: AMQP connection closed before we expected');
    process.exit(1);
});
conn.on('error', function (err) {
    console.error('sdc-check-amqp error: AMQP connection error:', err);
    process.exit(1);
});

conn.on('ready', function () {
    console.log('Connected to AMQP');

    // Create a test queue on which we'll listen.
    var q = conn.queue(
        'checkamqp.' + process.pid,
        {exclusive: true},
        function queueOpen() {
            q.bind('amq.topic', 'checkamqp.*', onBound);
            q.subscribe(onMessage);
        });

    function onBound() {
        console.log('Bound to queue');
        // Send a test message.
        conn.publish('checkamqp.testing',
            {id: 'checkamqp', pid: process.pid});
    }

    function onMessage(message, headers, deliveryInfo, messageObject) {
        conn.disconnect();
        assert.equal(deliveryInfo.routingKey, 'checkamqp.testing');
        assert.equal(message.pid, process.pid);
        if (timeout) {
            clearTimeout(timeout);
        }
        console.log('success: received test message');
        process.exit(0);
    }
});
