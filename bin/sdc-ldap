#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2014, Joyent, Inc.
#

#
# Convenience wrapper for calling some of the "ldap*" commands against UFDS.
#

# Find the directory the script lives in. We'll load config relative to that.
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CONFIG_JSON="${SCRIPT_DIR}/../etc/config.json"

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail


arch=$(uname -s)


# Arguments.
verbose=0
if [ "$1" == "-v" ]; then
    shift
    verbose=1
fi
command=$1
if [[ -z "$command" ]]; then
    echo "sdc-ldap -- light wrapper around ldap* commands for this datacenter's LDAP"
    echo ""
    echo "Usage:"
    echo "  sdc-ldap [-v] COMMAND ARGS"
    echo ""
    echo "Commands:"
    echo "  search, s         call 'ldapsearch' with appropriate connection/auth args"
    echo "  modify            call 'ldapmodify'"
    echo "  add               call 'ldapadd'"
    echo "  delete, del, rm   call 'ldapdelete'"
    exit 0
fi
shift;


# Determine connection and auth info.
if [[ -f ${CONFIG_JSON} ]]; then
    CONFIG_ufds_domain=$(json ufds_domain < ${CONFIG_JSON});
    CONFIG_ufds_ldap_root_dn=$(json ufds_ldap_root_dn < ${CONFIG_JSON});
    CONFIG_ufds_ldap_root_pw=$(json ufds_ldap_root_pw < ${CONFIG_JSON});

    UFDS_CREDENTIALS="$CONFIG_ufds_ldap_root_dn:$CONFIG_ufds_ldap_root_pw"
    UFDS_HOST="${CONFIG_ufds_domain}"
else
    if [[ -z "$UFDS_CREDENTIALS" ]]; then
        UFDS_CREDENTIALS=cn=root:secret
    fi
fi
if [[ -z "$UFDS_HOST" ]]; then
    echo "Unable to find UFDS host." >&2
    exit 1
fi
if [[ -z "$UFDS_PORT" ]]; then
    UFDS_PORT=636
fi

ufds_dn=$(echo "$UFDS_CREDENTIALS" | cut -d: -f1)
ufds_pw=$(echo "$UFDS_CREDENTIALS" | cut -d: -f2)

# Pick up OpenLDAP tools (instead of the Sun LDAP tools).
if [[ "$(uname -s)" == "SunOS" ]]; then
    export PATH=/usr/openldap/bin:$PATH
fi

# This is necessary for OpenLDAP commands to be able to use ldaps over SSL.
export LDAPTLS_REQCERT=allow


export ldap_opts="-H ldaps://$UFDS_HOST:$UFDS_PORT -x -D ${ufds_dn} -w ${ufds_pw}"
export ldap_opts_masked="-H ldaps://$UFDS_HOST:$UFDS_PORT -x -D ${ufds_dn} -w ***"


# Run the command.
case $command in

# Currently this does LDIF flattening of results as per:
# <http://richmegginson.livejournal.com/18726.html?view=27430#t27430>
# Is an option necessary to remove this?
search|s)
    [ "$verbose" == "1" ] && echo "# LDAPTLS_REQCERT=allow ldapsearch $ldap_opts_masked -LLL -b o=smartdc $@" >&2
    ldapsearch $ldap_opts -LLL -b o=smartdc "$@" | sed -n '1 {h; $ !d;}; $ {H; g; s/\n //g; p; q;}; /^ / {H; d;}; /^ /! {x; s/\n //g; p;}'
    ;;

modify)
    [ "$verbose" == "1" ] && echo "# LDAPTLS_REQCERT=allow ldapmodify $ldap_opts_masked $@" >&2
    ldapmodify $ldap_opts "$@"
    ;;

add)
    [ "$verbose" == "1" ] && echo "# LDAPTLS_REQCERT=allow ldapadd $ldap_opts_masked $@" >&2
    ldapadd $ldap_opts "$@"
    ;;

delete|rm|del)
    [ "$verbose" == "1" ] && echo "# LDAPTLS_REQCERT=allow ldapdelete $ldap_opts_masked $@" >&2
    ldapdelete $ldap_opts "$@"
    ;;

*)
    echo "sdc-ldap: error: unknown command '$command'"
    exit 1
    ;;
esac
